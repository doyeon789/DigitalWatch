
DigitalWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000724  000007b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000724  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800116  00800116  000007ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebf  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000924  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  000020b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ec  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000036a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	30 c1       	rjmp	.+608    	; 0x276 <__vector_5>
  16:	00 00       	nop
  18:	6b c1       	rjmp	.+726    	; 0x2f0 <__vector_6>
  1a:	00 00       	nop
  1c:	a8 c1       	rjmp	.+848    	; 0x36e <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	ee c0       	rjmp	.+476    	; 0x206 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	bb c0       	rjmp	.+374    	; 0x1a8 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c5 d2       	rcall	.+1418   	; 0x64e <main>
  c4:	2d c3       	rjmp	.+1626   	; 0x720 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <port_init>:
int timer_second  = 0;
int isInDe = 1;

// 포트 초기화 함수
void port_init() {
    DDRA = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
    DDRC = 0xff;
  cc:	84 bb       	out	0x14, r24	; 20
    DDRG = 0xff;
  ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    DDRE = 0x00;
  d2:	12 b8       	out	0x02, r1	; 2
  d4:	08 95       	ret

000000d6 <fnd_control>:
}

// FND 제어 함수
void fnd_control(int second) {
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	8c 01       	movw	r16, r24

	int hour = second/100;
  e4:	64 e6       	ldi	r22, 0x64	; 100
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	f4 d2       	rcall	.+1512   	; 0x6d2 <__divmodhi4>
  ea:	7b 01       	movw	r14, r22
  ec:	9c 01       	movw	r18, r24
	int minute = second%100;
	
    PORTG = fnd_sel[0];
  ee:	c2 e1       	ldi	r28, 0x12	; 18
  f0:	d1 e0       	ldi	r29, 0x01	; 1
  f2:	88 81       	ld	r24, Y
  f4:	e5 e6       	ldi	r30, 0x65	; 101
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 83       	st	Z, r24
    PORTC = ~fnd_data[hour / 10];
  fa:	c8 01       	movw	r24, r16
  fc:	68 ee       	ldi	r22, 0xE8	; 232
  fe:	73 e0       	ldi	r23, 0x03	; 3
 100:	e8 d2       	rcall	.+1488   	; 0x6d2 <__divmodhi4>
 102:	db 01       	movw	r26, r22
 104:	a8 5f       	subi	r26, 0xF8	; 248
 106:	be 4f       	sbci	r27, 0xFE	; 254
 108:	8c 91       	ld	r24, X
 10a:	80 95       	com	r24
 10c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e9       	ldi	r24, 0x9F	; 159
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <fnd_control+0x3c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <fnd_control+0x42>
 118:	00 00       	nop
    _delay_ms(1);
    
    PORTG = fnd_sel[1];
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	80 83       	st	Z, r24
    PORTC = ~fnd_data[hour % 10] + 128;
 11e:	0a e0       	ldi	r16, 0x0A	; 10
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c7 01       	movw	r24, r14
 124:	b8 01       	movw	r22, r16
 126:	d5 d2       	rcall	.+1450   	; 0x6d2 <__divmodhi4>
 128:	dc 01       	movw	r26, r24
 12a:	a8 5f       	subi	r26, 0xF8	; 248
 12c:	be 4f       	sbci	r27, 0xFE	; 254
 12e:	9c 91       	ld	r25, X
 130:	8f e7       	ldi	r24, 0x7F	; 127
 132:	89 1b       	sub	r24, r25
 134:	85 bb       	out	0x15, r24	; 21
 136:	af e9       	ldi	r26, 0x9F	; 159
 138:	bf e0       	ldi	r27, 0x0F	; 15
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <fnd_control+0x64>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <fnd_control+0x6a>
 140:	00 00       	nop
    _delay_ms(1);
    
    PORTG = fnd_sel[2];
 142:	8a 81       	ldd	r24, Y+2	; 0x02
    PORTC = ~fnd_data[minute / 10];
 144:	80 83       	st	Z, r24
 146:	c9 01       	movw	r24, r18
 148:	b8 01       	movw	r22, r16
 14a:	c3 d2       	rcall	.+1414   	; 0x6d2 <__divmodhi4>
 14c:	db 01       	movw	r26, r22
 14e:	a8 5f       	subi	r26, 0xF8	; 248
 150:	be 4f       	sbci	r27, 0xFE	; 254
 152:	2c 91       	ld	r18, X
 154:	20 95       	com	r18
 156:	25 bb       	out	0x15, r18	; 21
 158:	af e9       	ldi	r26, 0x9F	; 159
 15a:	bf e0       	ldi	r27, 0x0F	; 15
 15c:	11 97       	sbiw	r26, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <fnd_control+0x86>
 160:	00 c0       	rjmp	.+0      	; 0x162 <fnd_control+0x8c>
 162:	00 00       	nop
    _delay_ms(1);
    
    PORTG = fnd_sel[3];
 164:	2b 81       	ldd	r18, Y+3	; 0x03
 166:	20 83       	st	Z, r18
    PORTC = ~fnd_data[minute % 10];
 168:	fc 01       	movw	r30, r24
 16a:	e8 5f       	subi	r30, 0xF8	; 248
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	80 81       	ld	r24, Z
 170:	80 95       	com	r24
 172:	85 bb       	out	0x15, r24	; 21
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <fnd_control+0xa2>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <fnd_control+0xa8>
 17e:	00 00       	nop
    _delay_ms(1);
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret

0000018e <timer1_Nomalmode_init>:

// 타이머1 초기화 함수
void timer1_Nomalmode_init() {
    TCCR1A = 0; // 일반 모드 설정
 18e:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // CTC 모드, 프리스케일러 설정
 190:	8d e0       	ldi	r24, 0x0D	; 13
 192:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 194:	1d bc       	out	0x2d, r1	; 45
 196:	1c bc       	out	0x2c, r1	; 44
    OCR1A = 15624; // 1초마다 비교
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	9d e3       	ldi	r25, 0x3D	; 61
 19c:	9b bd       	out	0x2b, r25	; 43
 19e:	8a bd       	out	0x2a, r24	; 42
    TIMSK |= (1 << OCIE1A); // 비교 매치 인터럽트 허용
 1a0:	87 b7       	in	r24, 0x37	; 55
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	87 bf       	out	0x37, r24	; 55
 1a6:	08 95       	ret

000001a8 <__vector_12>:
}
// 타이머1 인터럽트 서비스 루틴
ISR(TIMER1_COMPA_vect) {
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
	static int repeat1A = 0;
	repeat1A++;
 1b6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <repeat1A.1752>
 1ba:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <repeat1A.1752+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <repeat1A.1752+0x1>
 1c4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <repeat1A.1752>
	if(repeat1A >= 60){
 1c8:	cc 97       	sbiw	r24, 0x3c	; 60
 1ca:	6c f0       	brlt	.+26     	; 0x1e6 <__vector_12+0x3e>
		minute_0++; // 분 증가
 1cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute_0>
 1d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <minute_0+0x1>
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <minute_0+0x1>
 1da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <minute_0>
		repeat1A = 0;
 1de:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <repeat1A.1752+0x1>
 1e2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <repeat1A.1752>
	}
}
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <timer2_Nomalmode_init>:

// 타이머2 초기화 함수
void timer2_Nomalmode_init(){
	TCCR2 |= (1<<CS22)|(1<<CS20);
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	85 60       	ori	r24, 0x05	; 5
 1f8:	85 bd       	out	0x25, r24	; 37
	TCNT2=4;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	84 bd       	out	0x24, r24	; 36
	TIMSK|=(1<<TOIE2);
 1fe:	87 b7       	in	r24, 0x37	; 55
 200:	80 64       	ori	r24, 0x40	; 64
 202:	87 bf       	out	0x37, r24	; 55
 204:	08 95       	ret

00000206 <__vector_10>:
}
// 타이머2 인터럽트 서비스 루틴
ISR(TIMER2_OVF_vect){
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
	static int repeat2=0;
	TCNT2=4;
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	84 bd       	out	0x24, r24	; 36
	repeat2++;
 218:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 21c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 226:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	if(repeat2>=62*1){
 22a:	ce 97       	sbiw	r24, 0x3e	; 62
 22c:	c4 f0       	brlt	.+48     	; 0x25e <__vector_10+0x58>
		repeat2=0;
 22e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 232:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
		if(isInDe == 1) isInDe=0;
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	91 05       	cpc	r25, r1
 242:	29 f4       	brne	.+10     	; 0x24e <__vector_10+0x48>
 244:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 248:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	08 c0       	rjmp	.+16     	; 0x25e <__vector_10+0x58>
		else if(isInDe == 0) isInDe=1;
 24e:	89 2b       	or	r24, r25
 250:	31 f4       	brne	.+12     	; 0x25e <__vector_10+0x58>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <interrupt_init>:


void interrupt_init(){
	EICRB = 0xaa;
 26c:	8a ea       	ldi	r24, 0xAA	; 170
 26e:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xf0;
 270:	80 ef       	ldi	r24, 0xF0	; 240
 272:	89 bf       	out	0x39, r24	; 57
 274:	08 95       	ret

00000276 <__vector_5>:
}

ISR(INT4_vect){
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	0b b6       	in	r0, 0x3b	; 59
 282:	0f 92       	push	r0
 284:	2f 93       	push	r18
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	80 e7       	ldi	r24, 0x70	; 112
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <__vector_5+0x1e>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <__vector_5+0x28>
 29e:	00 00       	nop
	// 채터링 방지 
	_delay_ms(50);
	EIFR = (1 << 4);
 2a0:	80 e1       	ldi	r24, 0x10	; 16
 2a2:	88 bf       	out	0x38, r24	; 56
	if ((PINE & (1 << PINE4)) == 0) {}
 2a4:	81 b1       	in	r24, 0x01	; 1

	mode = 0; // 모드 0 설정
 2a6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <mode+0x1>
 2aa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <mode>
	
	// fnd 끄기
	for (int i = 0; i < 4 ;i++) {
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <__vector_5+0x5c>
		PORTG = fnd_sel[i];
 2b4:	fc 01       	movw	r30, r24
 2b6:	ee 5e       	subi	r30, 0xEE	; 238
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	20 81       	ld	r18, Z
 2bc:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		PORTC = ~0;
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	25 bb       	out	0x15, r18	; 21
 2c4:	ef e9       	ldi	r30, 0x9F	; 159
 2c6:	ff e0       	ldi	r31, 0x0F	; 15
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <__vector_5+0x52>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <__vector_5+0x58>
 2ce:	00 00       	nop
	if ((PINE & (1 << PINE4)) == 0) {}

	mode = 0; // 모드 0 설정
	
	// fnd 끄기
	for (int i = 0; i < 4 ;i++) {
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	84 30       	cpi	r24, 0x04	; 4
 2d4:	91 05       	cpc	r25, r1
 2d6:	74 f3       	brlt	.-36     	; 0x2b4 <__vector_5+0x3e>
		PORTG = fnd_sel[i];
		PORTC = ~0;
		_delay_ms(1);
	}
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0b be       	out	0x3b, r0	; 59
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_6>:
ISR(INT5_vect){
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	0b b6       	in	r0, 0x3b	; 59
 2fc:	0f 92       	push	r0
 2fe:	2f 93       	push	r18
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	81 ee       	ldi	r24, 0xE1	; 225
 30c:	94 e0       	ldi	r25, 0x04	; 4
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <__vector_6+0x1e>
 316:	00 c0       	rjmp	.+0      	; 0x318 <__vector_6+0x28>
 318:	00 00       	nop
	// 채터링 방지
	_delay_ms(100);
	EIFR = (1 << 5);
 31a:	80 e2       	ldi	r24, 0x20	; 32
 31c:	88 bf       	out	0x38, r24	; 56
	if ((PINE & (1 << PINE5)) == 0) {}
 31e:	81 b1       	in	r24, 0x01	; 1
	
	mode = 1; // 모드 1 설정
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <mode+0x1>
 328:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <mode>
	
	// fnd 끄기
	for (int i = 0; i < 4 ;i++){
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0f c0       	rjmp	.+30     	; 0x350 <__vector_6+0x60>
		PORTG = fnd_sel[i];
 332:	fc 01       	movw	r30, r24
 334:	ee 5e       	subi	r30, 0xEE	; 238
 336:	fe 4f       	sbci	r31, 0xFE	; 254
 338:	20 81       	ld	r18, Z
 33a:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		PORTC = ~0;
 33e:	2f ef       	ldi	r18, 0xFF	; 255
 340:	25 bb       	out	0x15, r18	; 21
 342:	ef e9       	ldi	r30, 0x9F	; 159
 344:	ff e0       	ldi	r31, 0x0F	; 15
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <__vector_6+0x56>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <__vector_6+0x5c>
 34c:	00 00       	nop
	if ((PINE & (1 << PINE5)) == 0) {}
	
	mode = 1; // 모드 1 설정
	
	// fnd 끄기
	for (int i = 0; i < 4 ;i++){
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	91 05       	cpc	r25, r1
 354:	74 f3       	brlt	.-36     	; 0x332 <__vector_6+0x42>
		PORTG = fnd_sel[i];
		PORTC = ~0;
		_delay_ms(1);
	}
}
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_7>:
ISR(INT6_vect){
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	0b b6       	in	r0, 0x3b	; 59
 37a:	0f 92       	push	r0
 37c:	2f 93       	push	r18
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	ef 93       	push	r30
 384:	ff 93       	push	r31
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	81 ee       	ldi	r24, 0xE1	; 225
 38a:	94 e0       	ldi	r25, 0x04	; 4
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <__vector_7+0x1e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <__vector_7+0x28>
 396:	00 00       	nop
	// 채터링 방지
	_delay_ms(100);
	EIFR = (1 << 6);
 398:	80 e4       	ldi	r24, 0x40	; 64
 39a:	88 bf       	out	0x38, r24	; 56
	if ((PINE & (1 << PINE6)) == 0) {}
 39c:	81 b1       	in	r24, 0x01	; 1
		
	mode = 2; // 모드 2 설정
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <mode+0x1>
 3a6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <mode>
	
	// fnd 끄기
	for (int i = 0; i < 4 ;i++){
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0f c0       	rjmp	.+30     	; 0x3ce <__vector_7+0x60>
		PORTG = fnd_sel[i];
 3b0:	fc 01       	movw	r30, r24
 3b2:	ee 5e       	subi	r30, 0xEE	; 238
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	20 81       	ld	r18, Z
 3b8:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		PORTC = ~0;
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	25 bb       	out	0x15, r18	; 21
 3c0:	ef e9       	ldi	r30, 0x9F	; 159
 3c2:	ff e0       	ldi	r31, 0x0F	; 15
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <__vector_7+0x56>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <__vector_7+0x5c>
 3ca:	00 00       	nop
	if ((PINE & (1 << PINE6)) == 0) {}
		
	mode = 2; // 모드 2 설정
	
	// fnd 끄기
	for (int i = 0; i < 4 ;i++){
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	84 30       	cpi	r24, 0x04	; 4
 3d0:	91 05       	cpc	r25, r1
 3d2:	74 f3       	brlt	.-36     	; 0x3b0 <__vector_7+0x42>
		PORTG = fnd_sel[i];
		PORTC = ~0;
		_delay_ms(1);
	}
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0b be       	out	0x3b, r0	; 59
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <adc_init>:

// adc값 초기화 함수
void adc_init(){
	DDRF &= ~(1<<0);
 3ec:	e1 e6       	ldi	r30, 0x61	; 97
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	8e 7f       	andi	r24, 0xFE	; 254
 3f4:	80 83       	st	Z, r24
	ADMUX = 0;
 3f6:	17 b8       	out	0x07, r1	; 7
	ADCSRA = (1<<ADEN) | (7<<ADPS0);
 3f8:	87 e8       	ldi	r24, 0x87	; 135
 3fa:	86 b9       	out	0x06, r24	; 6
 3fc:	08 95       	ret

000003fe <read_adc>:
}
unsigned short read_adc() {
	ADCSRA |= (1<<ADSC);
 3fe:	86 b1       	in	r24, 0x06	; 6
 400:	80 64       	ori	r24, 0x40	; 64
 402:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA & (1<<ADIF)) != (1<<ADIF));
 404:	34 9b       	sbis	0x06, 4	; 6
 406:	fe cf       	rjmp	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	unsigned char adc_low = ADCL;
 408:	24 b1       	in	r18, 0x04	; 4
	unsigned char adc_high = ADCH;
 40a:	85 b1       	in	r24, 0x05	; 5
	
	if(ADMUX == 0) {
 40c:	97 b1       	in	r25, 0x07	; 7
 40e:	91 11       	cpse	r25, r1
 410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		ADMUX = 1;
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	97 b9       	out	0x07, r25	; 7
 416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}
	else if(ADMUX == 1){
 418:	97 b1       	in	r25, 0x07	; 7
 41a:	91 30       	cpi	r25, 0x01	; 1
 41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		ADMUX = 0;
 41e:	17 b8       	out	0x07, r1	; 7
	}
	
	return((unsigned short)adc_high << 8) | (unsigned short)adc_low;;
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	98 2f       	mov	r25, r24
 424:	88 27       	eor	r24, r24
}
 426:	82 2b       	or	r24, r18
 428:	08 95       	ret

0000042a <Time_set>:
void Time_set(int X, int Y,int mode){
	
	int first_time = 0;

	//여기 문제 있음 : 한번만 작동되도록 하기
	if(X <= 100  && isInDe == 1){
 42a:	85 36       	cpi	r24, 0x65	; 101
 42c:	91 05       	cpc	r25, r1
 42e:	e4 f4       	brge	.+56     	; 0x468 <Time_set+0x3e>
 430:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 434:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 438:	21 30       	cpi	r18, 0x01	; 1
 43a:	31 05       	cpc	r19, r1
 43c:	a9 f4       	brne	.+42     	; 0x468 <Time_set+0x3e>
		PORTA = 0xff;
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	2b bb       	out	0x1b, r18	; 27
		place++;
 442:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <place>
 446:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <place+0x1>
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <place+0x1>
 452:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <place>
		first_time = 0;
		if(place >= 4){
 456:	24 30       	cpi	r18, 0x04	; 4
 458:	31 05       	cpc	r19, r1
 45a:	34 f0       	brlt	.+12     	; 0x468 <Time_set+0x3e>
			place = 4;
 45c:	24 e0       	ldi	r18, 0x04	; 4
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <place+0x1>
 464:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <place>
		}
	}
	if(X >= 1022 && isInDe == 1){
 468:	8e 3f       	cpi	r24, 0xFE	; 254
 46a:	93 40       	sbci	r25, 0x03	; 3
 46c:	bc f0       	brlt	.+46     	; 0x49c <Time_set+0x72>
 46e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 472:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	89 f4       	brne	.+34     	; 0x49c <Time_set+0x72>
		place--;
 47a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <place>
 47e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <place+0x1>
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <place+0x1>
 488:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <place>
		first_time = 0;
		if(place <= 4){
 48c:	05 97       	sbiw	r24, 0x05	; 5
 48e:	34 f4       	brge	.+12     	; 0x49c <Time_set+0x72>
			place = 1;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <place+0x1>
 498:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <place>
		}
	}
	

	switch(place) {
 49c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <place>
 4a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <place+0x1>
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	91 05       	cpc	r25, r1
 4a8:	49 f1       	breq	.+82     	; 0x4fc <Time_set+0xd2>
 4aa:	1c f4       	brge	.+6      	; 0x4b2 <Time_set+0x88>
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	49 f0       	breq	.+18     	; 0x4c2 <Time_set+0x98>
 4b0:	7e c0       	rjmp	.+252    	; 0x5ae <Time_set+0x184>
 4b2:	83 30       	cpi	r24, 0x03	; 3
 4b4:	91 05       	cpc	r25, r1
 4b6:	09 f4       	brne	.+2      	; 0x4ba <Time_set+0x90>
 4b8:	3f c0       	rjmp	.+126    	; 0x538 <Time_set+0x10e>
 4ba:	04 97       	sbiw	r24, 0x04	; 4
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <Time_set+0x96>
 4be:	5a c0       	rjmp	.+180    	; 0x574 <Time_set+0x14a>
 4c0:	76 c0       	rjmp	.+236    	; 0x5ae <Time_set+0x184>
			case 1:
				timer_second += (Y >= 922 ? 1 : 0) - (Y <= 100 ? 1 : 0);
 4c2:	31 e0       	ldi	r19, 0x01	; 1
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	6a 39       	cpi	r22, 0x9A	; 154
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	78 07       	cpc	r23, r24
 4cc:	0c f4       	brge	.+2      	; 0x4d0 <Time_set+0xa6>
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	83 2f       	mov	r24, r19
 4d2:	92 2f       	mov	r25, r18
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	65 36       	cpi	r22, 0x65	; 101
 4da:	71 05       	cpc	r23, r1
 4dc:	14 f0       	brlt	.+4      	; 0x4e2 <Time_set+0xb8>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	82 1b       	sub	r24, r18
 4e4:	93 0b       	sbc	r25, r19
 4e6:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timer_second>
 4ea:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timer_second+0x1>
 4ee:	82 0f       	add	r24, r18
 4f0:	93 1f       	adc	r25, r19
 4f2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer_second+0x1>
 4f6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer_second>
				break;
 4fa:	59 c0       	rjmp	.+178    	; 0x5ae <Time_set+0x184>
			case 2:
				timer_second += (Y >= 922 ? 10 : 0) - (Y <= 100 ? 10 : 0);
 4fc:	6a 39       	cpi	r22, 0x9A	; 154
 4fe:	23 e0       	ldi	r18, 0x03	; 3
 500:	72 07       	cpc	r23, r18
 502:	1c f0       	brlt	.+6      	; 0x50a <Time_set+0xe0>
 504:	8a e0       	ldi	r24, 0x0A	; 10
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <Time_set+0xe4>
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	65 36       	cpi	r22, 0x65	; 101
 510:	71 05       	cpc	r23, r1
 512:	1c f4       	brge	.+6      	; 0x51a <Time_set+0xf0>
 514:	2a e0       	ldi	r18, 0x0A	; 10
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <Time_set+0xf4>
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	82 1b       	sub	r24, r18
 520:	93 0b       	sbc	r25, r19
 522:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timer_second>
 526:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timer_second+0x1>
 52a:	82 0f       	add	r24, r18
 52c:	93 1f       	adc	r25, r19
 52e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer_second+0x1>
 532:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer_second>
				break;
 536:	3b c0       	rjmp	.+118    	; 0x5ae <Time_set+0x184>
			case 3:
				timer_second += (Y >= 922 ? 60 : 0) - (Y <= 100 ? 60 : 0);
 538:	6a 39       	cpi	r22, 0x9A	; 154
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	78 07       	cpc	r23, r24
 53e:	1c f0       	brlt	.+6      	; 0x546 <Time_set+0x11c>
 540:	8c e3       	ldi	r24, 0x3C	; 60
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <Time_set+0x120>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	65 36       	cpi	r22, 0x65	; 101
 54c:	71 05       	cpc	r23, r1
 54e:	1c f4       	brge	.+6      	; 0x556 <Time_set+0x12c>
 550:	2c e3       	ldi	r18, 0x3C	; 60
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <Time_set+0x130>
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	82 1b       	sub	r24, r18
 55c:	93 0b       	sbc	r25, r19
 55e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timer_second>
 562:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timer_second+0x1>
 566:	82 0f       	add	r24, r18
 568:	93 1f       	adc	r25, r19
 56a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer_second+0x1>
 56e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer_second>
				break;
 572:	1d c0       	rjmp	.+58     	; 0x5ae <Time_set+0x184>
			case 4:
				timer_second += (Y >= 922 ? 600 : 0) - (Y <= 100 ? 600 : 0);
 574:	6a 39       	cpi	r22, 0x9A	; 154
 576:	23 e0       	ldi	r18, 0x03	; 3
 578:	72 07       	cpc	r23, r18
 57a:	1c f0       	brlt	.+6      	; 0x582 <Time_set+0x158>
 57c:	88 e5       	ldi	r24, 0x58	; 88
 57e:	92 e0       	ldi	r25, 0x02	; 2
 580:	02 c0       	rjmp	.+4      	; 0x586 <Time_set+0x15c>
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	65 36       	cpi	r22, 0x65	; 101
 588:	71 05       	cpc	r23, r1
 58a:	1c f4       	brge	.+6      	; 0x592 <Time_set+0x168>
 58c:	28 e5       	ldi	r18, 0x58	; 88
 58e:	32 e0       	ldi	r19, 0x02	; 2
 590:	02 c0       	rjmp	.+4      	; 0x596 <Time_set+0x16c>
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	82 1b       	sub	r24, r18
 598:	93 0b       	sbc	r25, r19
 59a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timer_second>
 59e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timer_second+0x1>
 5a2:	82 0f       	add	r24, r18
 5a4:	93 1f       	adc	r25, r19
 5a6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer_second+0x1>
 5aa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer_second>
				break;
		}
	
	

	if(timer_second <= 0) {
 5ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timer_second>
 5b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timer_second+0x1>
 5b6:	18 16       	cp	r1, r24
 5b8:	19 06       	cpc	r1, r25
 5ba:	24 f0       	brlt	.+8      	; 0x5c4 <Time_set+0x19a>
		timer_second = 0;
 5bc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <timer_second+0x1>
 5c0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <timer_second>
	}

	switch(mode){
 5c4:	41 30       	cpi	r20, 0x01	; 1
 5c6:	51 05       	cpc	r21, r1
 5c8:	21 f0       	breq	.+8      	; 0x5d2 <Time_set+0x1a8>
 5ca:	42 30       	cpi	r20, 0x02	; 2
 5cc:	51 05       	cpc	r21, r1
 5ce:	81 f0       	breq	.+32     	; 0x5f0 <Time_set+0x1c6>
 5d0:	08 95       	ret
		case 1:
			timer_second = (timer_second >= 9999) ? 9999 : timer_second;
 5d2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timer_second>
 5d6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timer_second+0x1>
 5da:	80 31       	cpi	r24, 0x10	; 16
 5dc:	27 e2       	ldi	r18, 0x27	; 39
 5de:	92 07       	cpc	r25, r18
 5e0:	14 f0       	brlt	.+4      	; 0x5e6 <Time_set+0x1bc>
 5e2:	8f e0       	ldi	r24, 0x0F	; 15
 5e4:	97 e2       	ldi	r25, 0x27	; 39
 5e6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer_second+0x1>
 5ea:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer_second>
			break;
 5ee:	08 95       	ret
		case 2:
			timer_second = (timer_second >= 2400) ? 2400 : timer_second;
 5f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timer_second>
 5f4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timer_second+0x1>
 5f8:	81 36       	cpi	r24, 0x61	; 97
 5fa:	29 e0       	ldi	r18, 0x09	; 9
 5fc:	92 07       	cpc	r25, r18
 5fe:	14 f0       	brlt	.+4      	; 0x604 <Time_set+0x1da>
 600:	80 e6       	ldi	r24, 0x60	; 96
 602:	99 e0       	ldi	r25, 0x09	; 9
 604:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timer_second+0x1>
 608:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timer_second>
 60c:	08 95       	ret

0000060e <Digital_Watch>:
	}
}

// 디지털 시계 알고리즘 함수 (모드 : 0)
void Digital_Watch() {
	if (minute_0 >= 60) {
 60e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute_0>
 612:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <minute_0+0x1>
 616:	cc 97       	sbiw	r24, 0x3c	; 60
 618:	9c f0       	brlt	.+38     	; 0x640 <Digital_Watch+0x32>
		minute_0 = 0;
 61a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <minute_0+0x1>
 61e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <minute_0>
		hour_0++;
 622:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour_0>
 626:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour_0+0x1>
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <hour_0+0x1>
 630:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hour_0>
		if (hour_0 >= 24) {
 634:	48 97       	sbiw	r24, 0x18	; 24
 636:	24 f0       	brlt	.+8      	; 0x640 <Digital_Watch+0x32>
			hour_0 = 0;
 638:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <hour_0+0x1>
 63c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <hour_0>
 640:	08 95       	ret

00000642 <Digital_Timer>:
	}
}

// 디지털 타이머 알고리즘 함수 (모드 : 1)
void Digital_Timer(int X, int Y) {
	Time_set(X,Y,mode);
 642:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <mode>
 646:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <mode+0x1>
 64a:	ef ce       	rjmp	.-546    	; 0x42a <Time_set>
 64c:	08 95       	ret

0000064e <main>:
int main(void) {
	
	int joystick_x = 0;
	int joystick_y = 0;
	
	adc_init(); // 아날로그 초기화
 64e:	ce de       	rcall	.-612    	; 0x3ec <adc_init>
    port_init(); // 포트 초기화
 650:	3b dd       	rcall	.-1418   	; 0xc8 <port_init>
    timer1_Nomalmode_init(); // 타이머1 초기화
 652:	9d dd       	rcall	.-1222   	; 0x18e <timer1_Nomalmode_init>
	timer2_Nomalmode_init(); // 터이머2 초기화
 654:	cf dd       	rcall	.-1122   	; 0x1f4 <timer2_Nomalmode_init>
 656:	0a de       	rcall	.-1004   	; 0x26c <interrupt_init>
	interrupt_init(); // 인터럽트 초기화
 658:	78 94       	sei
 65a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <mode>
    sei(); // 전역 인터럽트 허용

    while (1) {
		switch (mode) { // 모드에 따른 동작 분기
 65e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <mode+0x1>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	91 05       	cpc	r25, r1
 666:	11 f1       	breq	.+68     	; 0x6ac <main+0x5e>
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	91 05       	cpc	r25, r1
 66c:	69 f1       	breq	.+90     	; 0x6c8 <main+0x7a>
 66e:	89 2b       	or	r24, r25
 670:	a1 f7       	brne	.-24     	; 0x65a <main+0xc>
 672:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour_0>
            case 0:
				system_second = hour_0*100 + minute_0;
 676:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour_0+0x1>
 67a:	44 e6       	ldi	r20, 0x64	; 100
 67c:	48 9f       	mul	r20, r24
 67e:	90 01       	movw	r18, r0
 680:	49 9f       	mul	r20, r25
 682:	30 0d       	add	r19, r0
 684:	11 24       	eor	r1, r1
 686:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute_0>
 68a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <minute_0+0x1>
 68e:	82 0f       	add	r24, r18
 690:	93 1f       	adc	r25, r19
 692:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <system_second+0x1>
 696:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <system_second>
 69a:	81 e0       	ldi	r24, 0x01	; 1
				PORTA = 0x01;
 69c:	8b bb       	out	0x1b, r24	; 27
 69e:	b7 df       	rcall	.-146    	; 0x60e <Digital_Watch>
                Digital_Watch(); // 시계 알고리즘 호출
 6a0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <system_second>
				fnd_control(system_second); // FND 표시
 6a4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <system_second+0x1>
 6a8:	16 dd       	rcall	.-1492   	; 0xd6 <fnd_control>
                break;
 6aa:	d7 cf       	rjmp	.-82     	; 0x65a <main+0xc>
			case 1:
				PORTA = 0x02;
 6ac:	82 e0       	ldi	r24, 0x02	; 2
				
				joystick_x = read_adc();
 6ae:	8b bb       	out	0x1b, r24	; 27
 6b0:	a6 de       	rcall	.-692    	; 0x3fe <read_adc>
 6b2:	ec 01       	movw	r28, r24
				joystick_y = read_adc();
 6b4:	a4 de       	rcall	.-696    	; 0x3fe <read_adc>
				
				Digital_Timer(joystick_x,joystick_y);
 6b6:	bc 01       	movw	r22, r24
 6b8:	ce 01       	movw	r24, r28
 6ba:	c3 df       	rcall	.-122    	; 0x642 <Digital_Timer>
				fnd_control(timer_second); // FND 표시
 6bc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timer_second>
 6c0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timer_second+0x1>
 6c4:	08 dd       	rcall	.-1520   	; 0xd6 <fnd_control>
 6c6:	c9 cf       	rjmp	.-110    	; 0x65a <main+0xc>
				break;
 6c8:	84 e0       	ldi	r24, 0x04	; 4
            case 2:
				PORTA = 0x04;
 6ca:	8b bb       	out	0x1b, r24	; 27
 6cc:	98 de       	rcall	.-720    	; 0x3fe <read_adc>
				
				joystick_x = read_adc();
 6ce:	97 de       	rcall	.-722    	; 0x3fe <read_adc>
 6d0:	c4 cf       	rjmp	.-120    	; 0x65a <main+0xc>

000006d2 <__divmodhi4>:
				joystick_y = read_adc();
 6d2:	97 fb       	bst	r25, 7
 6d4:	07 2e       	mov	r0, r23

				break;
 6d6:	16 f4       	brtc	.+4      	; 0x6dc <__divmodhi4+0xa>
 6d8:	00 94       	com	r0
 6da:	06 d0       	rcall	.+12     	; 0x6e8 <__divmodhi4_neg1>
 6dc:	77 fd       	sbrc	r23, 7
 6de:	08 d0       	rcall	.+16     	; 0x6f0 <__divmodhi4_neg2>
 6e0:	0b d0       	rcall	.+22     	; 0x6f8 <__udivmodhi4>
 6e2:	07 fc       	sbrc	r0, 7
 6e4:	05 d0       	rcall	.+10     	; 0x6f0 <__divmodhi4_neg2>
 6e6:	3e f4       	brtc	.+14     	; 0x6f6 <__divmodhi4_exit>

000006e8 <__divmodhi4_neg1>:
 6e8:	90 95       	com	r25
 6ea:	81 95       	neg	r24
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__divmodhi4_neg2>:
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255

000006f6 <__divmodhi4_exit>:
 6f6:	08 95       	ret

000006f8 <__udivmodhi4>:
 6f8:	aa 1b       	sub	r26, r26
 6fa:	bb 1b       	sub	r27, r27
 6fc:	51 e1       	ldi	r21, 0x11	; 17
 6fe:	07 c0       	rjmp	.+14     	; 0x70e <__udivmodhi4_ep>

00000700 <__udivmodhi4_loop>:
 700:	aa 1f       	adc	r26, r26
 702:	bb 1f       	adc	r27, r27
 704:	a6 17       	cp	r26, r22
 706:	b7 07       	cpc	r27, r23
 708:	10 f0       	brcs	.+4      	; 0x70e <__udivmodhi4_ep>
 70a:	a6 1b       	sub	r26, r22
 70c:	b7 0b       	sbc	r27, r23

0000070e <__udivmodhi4_ep>:
 70e:	88 1f       	adc	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	5a 95       	dec	r21
 714:	a9 f7       	brne	.-22     	; 0x700 <__udivmodhi4_loop>
 716:	80 95       	com	r24
 718:	90 95       	com	r25
 71a:	bc 01       	movw	r22, r24
 71c:	cd 01       	movw	r24, r26
 71e:	08 95       	ret

00000720 <_exit>:
 720:	f8 94       	cli

00000722 <__stop_program>:
 722:	ff cf       	rjmp	.-2      	; 0x722 <__stop_program>
